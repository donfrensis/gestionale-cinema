datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique
  passwordHash  String
  isAdmin       Boolean       @default(false)
  firstAccess   Boolean       @default(true)
  createdAt     DateTime      @default(now())
  shows         Show[]        @relation("OperatorShows")
  availability  Availability[]
  cashReports   CashReport[]
  withdrawals   Withdrawal[]
}

model Film {
  id            Int      @id @default(autoincrement())
  title         String
  duration      Int?
  bolId         Int?     // ID BOL LiveTicket
  cinetelId     String?
  description   String?  @db.Text
  notes         String?  @db.Text
  createdAt     DateTime @default(now())
  shows         Show[]
  importedFrom  String?  // "BOL" | "EXCEL"
}

model Show {
  id          Int           @id @default(autoincrement())
  date        DateTime      @db.Date
  time        DateTime      @db.Time
  filmId      Int
  film        Film          @relation(fields: [filmId], references: [id])
  operatorId  Int?
  operator    User?         @relation("OperatorShows", fields: [operatorId], references: [id])
  bolId       Int?          // ID_Spettacolo BOL
  notes       String?       @db.Text
  createdAt   DateTime      @default(now())
  availability Availability[]
  cashReport   CashReport?
}

model Availability {
  id          Int       @id @default(autoincrement())
  showId      Int
  show        Show      @relation(fields: [showId], references: [id])
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  status      String    // "AVAILABLE" | "CONFIRMED" | "WITHDRAWN"
  notes       String?   @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([showId, userId])
}

model CashReport {
  id                Int       @id @default(autoincrement())
  showId           Int       @unique
  show             Show      @relation(fields: [showId], references: [id])
  operatorId       Int
  operator         User      @relation(fields: [operatorId], references: [id])
  // Apertura
  openingCash      Json      // { "50": 0, "20": 0, ... }
  openingDateTime  DateTime
  // Chiusura
  closingCash      Json?     // { "50": 0, "20": 0, ... }
  closingDateTime  DateTime?
  posTotal        Decimal?   @db.Decimal(10, 2)
  ticketTotal     Decimal?   @db.Decimal(10, 2)
  subscriptionTotal Decimal? @db.Decimal(10, 2)
  notes           String?    @db.Text
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Withdrawal {
  id          Int       @id @default(autoincrement())
  amount      Decimal   @db.Decimal(10, 2)
  adminId     Int
  admin       User      @relation(fields: [adminId], references: [id])
  bankDeposit BankDeposit? @relation(fields: [depositId], references: [id])
  depositId   Int?
  notes       String?   @db.Text
  createdAt   DateTime  @default(now())
}

model BankDeposit {
  id          Int          @id @default(autoincrement())
  amount      Decimal      @db.Decimal(10, 2)
  date        DateTime
  reference   String?      // Riferimento operazione bancaria
  adminId     Int
  withdrawals Withdrawal[]
  notes       String?      @db.Text
  createdAt   DateTime     @default(now())
}